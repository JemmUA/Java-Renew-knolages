drop table if exists users ;
drop table if exists roles ;
drop table if exists houses ;
drop table if exists user_role ;

CREATE TABLE IF NOT EXISTS users(
	id serial CONSTRAINT users_pk PRIMARY KEY,
	surname varchar (33),
	name varchar (33),
	email varchar(30) UNIQUE NOT NULL,
	password varchar (20),
	age int
);

CREATE TABLE IF NOT EXISTS roles(
	id serial CONSTRAINT roles_pk PRIMARY KEY,
	name varchar(12)
);

-- CREATE TABLE IF NOT EXISTS houses(
-- 	id serial CONSTRAINT houses_pk PRIMARY KEY,
-- 	address varchar(50) UNIQUE NOT NULL,
-- 	user_id int
-- );

-- -- CREATE TABLE IF NOT EXISTS user_role(
-- -- 	user_id int REFERENCES users (id) ON DELETE CASCADE,
-- -- 	role_id int REFERENCES roles (id) ON DELETE CASCADE
-- -- );

-- CREATE TABLE IF NOT EXISTS user_role(
-- 	user_id int, CONSTRAINT fk_users FOREIGN KEY (user_id) REFERENCES users (id),
-- 	role_id int, CONSTRAINT fk_roles FOREIGN KEY (role_id) REFERENCES roles (id)
-- );



INSERT INTO users(name, surname, email, password, age)
VALUES ('Alex', 'Jestock', 'alexa@mail.ua', 'aldsjfeieye4', 33);
INSERT INTO users(name, surname, email, password, age)
VALUES ('Una', 'Sea', 'una@mail.ua', 'hfueewh', 21);
INSERT INTO users(name, surname, email, password, age)
VALUES ('Ben', 'Bennin', 'ben@mail.ua', 'ksnvue37ew', 24);
INSERT INTO users(name, surname, email, password, age)
VALUES ('Bob', 'Bobkin', 'bob@mail.ua', 'bwshfe832', 8);
INSERT INTO users(name, surname, email, password, age)
VALUES ('Eva', 'Adamova', 'eva@mail.ua', 'ev38tew', 27);


-- INSERT INTO roles (name) VALUES ('USER');
-- INSERT INTO roles (name) VALUES ('ADMIN');

-- INSERT INTO user_role (user_id, role_id) VALUES (1,1);
-- INSERT INTO user_role (user_id, role_id) VALUES (1,2);
-- INSERT INTO user_role (user_id, role_id) VALUES (2,1);
-- INSERT INTO user_role (user_id, role_id) VALUES (3,1);
-- INSERT INTO user_role (user_id, role_id) VALUES (4,1);
-- INSERT INTO user_role (user_id, role_id) VALUES (5,1);

-- INSERT INTO houses (address, user_id) VALUES ('Kyiv', 1);
-- INSERT INTO houses (address, user_id) VALUES ('Kharkiv', 1);
-- INSERT INTO houses (address, user_id) VALUES ('Lubny', 1);
-- INSERT INTO houses (address, user_id) VALUES ('Odessa', 2);
-- INSERT INTO houses (address, user_id) VALUES ('Poltava', 3);
-- INSERT INTO houses (address, user_id) VALUES ('Zhitomyr', 4);
-- INSERT INTO houses (address, user_id) VALUES ('Lutsk', 5);

-- DELETE FROM users where id = 3;
-- select * from users;

select u.name, r.name as role from users u
inner join user_role ur on u.id=ur.user_id
inner join roles as r on ur.role_id=r.id;

select u.id, u.name, h.address from users u right join houses h on u.id = user_id;

CREATE INDEX email_index ON users(email);
DROP INDEX email_index;

CREATE TRIGGER user_trigger
AFTER INSERT OR DELETE ON users
FOR EACH ROW EXECUTE PROCEDURE update_user_role();

CREATE OR REPLACE FUNCTION update_user_role() RETURNS TRIGGER AS $$
DECLARE
	cut_id int;
	cut_role_id int;
BEGIN
	IF TG_OP = 'INSERT' THEN
		cut_id = NEW.id;
		cut_role_id = (SELECT id FROM roles WHERE name = 'USER');
		INSERT INTO user_role(user_id, role_id) VALUES (cut_id, cut_role_id);
		RETURN NEW;
	ELSEIF TG_OP = 'DELETE' THEN
		cut_id = OLD.id;
		DELETE FROM user_role WHERE user_id = cut_id;
		RETURN OLD;
	END IF;
END;
$$ LANGUAGE plpgsql;
